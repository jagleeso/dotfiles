#!/usr/bin/env python
import argparse
import os
import textwrap
import re
import sys
from os import environ as env

def main():
    parser = argparse.ArgumentParser(description="debug kernel module oops by showing last line number")
    parser.add_argument("--lastkmsg",
        help="last kmsg log")
    parser.add_argument("--obj",
        help="module.o file")
    parser.add_argument("--gdb",
        default="arm-linux-gdb",
        help="gdb command")
    parser.add_argument("--kernel",
        default=env['KERN'] + '/vmlinux.o',
        help="gdb command")
    args = parser.parse_args()

    if args.lastkmsg is None:
        args.lastkmsg = sys.stdin
    d = parse_lastkmsg(args.lastkmsg)

    if args.obj is None:
        mod = d['module']
        if mod:
            args.obj = env['HOME'] + "/android/{mod}/{mod}.o".format(**locals())

    if not os.path.isfile(args.obj):
        obj = args.obj
        parser.error("{obj} doesn't exist".format(**locals()))
    dargs = vars(args)
    del dargs['lastkmsg']
    oopsline(d, **dargs)

def parse_lastkmsg(lastkmsg):
    d = {}
    f = None
    if type(lastkmsg) == str:
        f = open(lastkmsg)
    else:
        f = lastkmsg
        
    for line in f:
        m = re.search(r"Internal error: Oops:", line)
        if m:
            break
    function = None
    offset = None
    offset_re = r"(?:0x[^/]+)"
    function_re = r"(?:[^+]+)"
    for line in f:
        m = re.search(r"Modules linked in: ([^(]+)\(", line)
        if m:
            d['module'] = m.group(1)
            continue
        m = re.search(r"PC is at ({function_re})\+({offset_re})/".format(**locals()), line)
        if m:
            function = m.group(1)
            offset = m.group(2)
            break
    assert function
    assert offset
    d['function'] = function
    d['offset'] = offset
    hex_re = r"(?:[\da-z]{8})"
    trace = []
    for line in f:
        m = re.search(r"\[<{hex_re}>\] \({function_re}\+{offset_re}".format(**locals()), line)
        if m:
            trace.append(line.rstrip())
            continue
        m = re.search(r"---\[ end trace .* \]---", line)
        if m:
            break
    d['trace'] = trace
    # read the rest so it doesn't get piped to gdb
    for line in f:
        pass
    f.close()

    return d

def oopsline(d, obj, gdb, kernel):
        # add-symbol-file {kernel}
    print "Call trace:"
    for t in d['trace']:
        print t
    with open('.gdbinit', 'w') as gdbinit:
        gdbinit.write(textwrap.dedent("""
        list *({function})+{offset}
        """.format(**union(d, locals()))))
    os.system('{gdb} {obj}'.format(**locals()))

def union(d1, d2):
    return dict(d1.items() + d2.items())

def last_module_loaded(lastkmsg):
    with open(lastkmsg) as f:
        for line in f:
            m = re.search(r"Modules linked in: ([^(]+)\(", line)
            if m:
                return m.group(1)

if __name__ == '__main__':
    main()
