# https://davidwpearson.wordpress.com/2017/01/12/installing-nvidias-cuda-8-0-on-fedora-25/
if [ -e /usr/local/cuda/bin ]; then
    export PATH=$PATH:/usr/local/cuda/bin
fi
if [ -e /pkgs/cuda-8.0/bin ]; then
    export PATH=$PATH:/pkgs/cuda-8.0/bin
fi

if [ -e $HOME/clone/CNTK_data_dir ]; then
    # wget https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz
    export CNTK_EXTERNAL_TESTDATA_SOURCE_DIRECTORY=$HOME/clone/CNTK_data_dir
fi

if [ "$(hostname)" != "james-laptop" ] && [ -e /usr/local/cuda/bin ] && [ ! -e /etc/ld.so.conf.d/nvidia.conf ]; then
    echo "WARNING: you need to"
    echo "- put /usr/local/cuda/lib64 in /etc/ld.so.conf.d/nvidia.conf"
    echo "- run \"sudo ldconfig\""
fi

if [ -e /etc/redhat-release ]; then
    if cat /etc/redhat-release | grep -q "Fedora.*25" && [ ! -e /opt/rh/devtoolset-4/enable ]; then
        echo "WARNING: you need to install gcc 5.3.1 (for Fedora 25)"
        echo "- download and install the SCL repos for CentOS 7:"
        echo "  wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-rh-2-2.el7.centos.noarch.rpm"
        echo "  wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-2-2.el7.centos.noarch.rpm"
        echo "- install devtoolset-4 related packages:"
        echo "  sudo yum install -y devtoolset-4-gcc devtoolset-4-gcc-c++ devtoolset-4-libgccjit devtoolset-4-gcc-gfortran devtoolset-4-libgccjit-docs devtoolset-4-libgccjit-devel devtoolset-4-gcc-plugin-devel devtoolset-4-libstdc++-docs devtoolset-4-libstdc++-devel devtoolset-4-gcc-gdb-plugin"
    else 
        # "scl enable" doesn't work for some reason...
        source /opt/rh/devtoolset-4/enable
    fi
fi

if [ -e /opt/rocm/bin ]; then
    export PATH="/opt/rocm/bin:$PATH"
fi

export RD=$HOME/clone/RDMA-GPU

export CN=$HOME/clone/CNTK
export RV=$HOME/clone/parallel-revnet
activate_cntk() {
    if [ -e $RD/source_me.sh ]; then
        source $RD/source_me.sh 2>& /dev/null
    fi
}
activate_cntk_fresh() {
    if [ -e  $HOME/clone/CNTK_fresh ] && [ -e $RD/source_me.sh ]; then
        CNTK_DIR=$HOME/clone/CNTK_fresh source $RD/source_me.sh 2>& /dev/null
    fi
}
activate_revnet() {
    if [ -e ~/anaconda3/envs/revnet ]; then
        source activate revnet
    fi
}
activate_cntk || true

fresh_cntk() {
    $CN/build/fresh/bin/cntk "$@"
}

gdbforever() {
    (
    set -e
    local port=
    if [ "$PORT" = "" ]; then
        port=1234
    else
        port=$PORT
    fi

    local output=
    if [ "$OUTPUT" = "" ]; then
        output=gdb.output
    else
        output=$OUTPUT
    fi

    local kill_gdb_sh=
    if [ "$KILL_GDB_SH" = "" ]; then
        kill_gdb_sh=kill_gdb.sh
    else
        kill_gdb_sh=$KILL_GDB_SH
    fi

    local GDBSERVER=
    if which "$HOME/gdb8/bin/gdbserver"; then
        GDBSERVER="$HOME/gdb8/bin/gdbserver"
    elif which gdbserver; then
        GDBSERVER=gdbserver
    fi
    # GDBSERVER=gdbserver
    echo "GDBSERVER=$GDBSERVER"

    local args=( "$@" )
    local executable="${args[1]}"
    echo "ARGS = ${args[@]}"
    echo "executable = $executable"

    if [ "$GDBSERVER" = '' ]; then
        echo "ERROR: couldn't find gdbserver"
        return 1
    fi

    (
    while true; do; 
        if [ ! -e "$executable" ]; then
            echo "Waiting for $executable to exist..."
            while [ ! -e "$executable" ]; do
                sleep 1
            done
        fi
        echo $GDBSERVER localhost:$port "$@" " | tee $(realpath $output)"
        ( $GDBSERVER localhost:$port "$@" 2>&1 | tee $output ) || true
    done
    ) &
    local loop_pid=$!

    sleep 0.5

    cat <<EOF > $kill_gdb_sh
#!/bin/bash
kill $loop_pid && killall gdbserver
EOF
    chmod +x $kill_gdb_sh

    echo
    echo "To stop, type:"
    echo "$ kill $loop_pid && killall gdbserver"
    echo "Or run:"
    echo "$ $(realpath $kill_gdb_sh)"

    wait
    )
}
